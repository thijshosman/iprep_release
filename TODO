
A: 
-framework for error handling
-save SEMcoords object into tags->use examples John
	-new SEMcoordManager class that is instantiated by SEM_iprep that has methods for:
	-this will replace semcoord attributes of SEM_iprep class so that SEM_iprep methods that need coordinates get them directly from the tags through the semcoordmanager
v-puncture classes with checks as defined in iprep_general
	v-make sure safety is at the lowest level
	v-create interface for iprep_general to allow checks names to be in device classes through mediator
	-checks:
		v-SEM: SEM checks that parker is < 400 before moving
		v-PECS: only close GV when parker < 150
		v-PECS: only move stage up when parker < 20
		v-Parker: only move > 150 when GV is open
		v-Parker: only move > 400 when SEM in pickup/dropoff or clear
		v-Parker: check that PECS stage is lowered when moving
v-ABC for hw to simulate iprep after it ships. make choice in linearWorkflow. no base
	v-dock-simulator and dock
		-planardock and ebsddock differentiation solution
	-sem and sem-simulator -> waiting for semcoordsmanager class
	v-pecs and pecs-simulator
	v-gripper and gripper-simulator
	v-transfer and transfer-simulator
-test the simulators with well defined tests in separate files
	v-gripper
	v-dock
	v-pecs
	v-transfer
	-sem -> waiting for semcoordsmanager class
-check for hw bridge fault (or any fault) in transfer class
-proper start routine that does checks of hardware and states in workflow
	-make sure workflow can start/resume from PECS as well (ie after DM restart)
-update functions in Sal's UI module to include error handling and agree on error codes
-integrate EBSD camera class into workflow
-make workflow compatible with choosing planar vs EBSD
	-use settings button
-init functions checks consistency between expected state tags and actual state as read from sensors. if there is a discrepancy, notify user and do not allow process to start. allow manual recovery/setup of correct state. this is needed when DM starts to make sure everything is right 
	-PECS Gate valve (open/closed) against sensor inputs
	-PECS stage (lowered/raised) against WL sensor state
	-SEM add consistency check for sem state changes that checks current state against coordinates saved in tag
-UPS check once every cycle
	-make late binding method with executescriptstring method
-SEM state check once every cycle
	-decide what to check in SEM
-dock change names to clamp and unclamp
-workflow checks that sample is present

B:
-implement consistent and well thought out user dialog in combination of results/debug/logfile/UI menus
-UI elements to show status
-clean up main to put stuff back in classes below
	-remove kv/wd stuff from sem class
	-handle imaging from main, remove from state machine and workflow
	-handle pecs camera back in pecs class
-multi ROI

device specific:
Tranfer:
-detect if system has been homed since last powerup









