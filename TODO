
A: 
-framework for error handling
	v-string set for deadflag with reason deadflag was set - what device did set errorcode?
	-table of errorcodes
	-integrate setting reason for error and last device into workflow
	-add a throw method to each hardware class that sets the "last device" and "last errorcode" tag. those can be read back out by deadflagobject
v-save SEMcoords object into tags->use examples John
	v-new SEMcoordManager class that is instantiated by SEM_iprep that has methods for:
	v-replace semcoord attributes of SEM_iprep class so that SEM_iprep methods that need coordinates get them directly from the tags through the semcoordmanager
v-puncture classes with checks as defined in iprep_general
	v-make sure safety is at the lowest level
	v-create interface for iprep_general to allow checks names to be in device classes through mediator
	-checks:
		v-SEM: SEM checks that parker is < 400 before moving except pickup/dropoff
		v-PECS: only close GV when parker < 150
		v-PECS: only move stage up when parker < 20
		v-Parker: only move > 150 when GV is open
		v-Parker: only move > 400 when SEM in pickup/dropoff or clear
		v-Parker: check that PECS stage is lowered when moving
		-do not go in negative direction with gripper closed if it is in the pecs
v-ABC for hw to simulate iprep after it ships. make choice in linearWorkflow. no base
	v-dock-simulator and dock
		-planardock and ebsddock differentiation solution
	-sem and sem-simulator 
	v-pecs and pecs-simulator
	v-gripper and gripper-simulator
	v-transfer and transfer-simulator
-test the simulators with well defined tests in separate files
	v-gripper
	v-dock
	v-pecs
	v-transfer
	-sem 
v-check for hw bridge fault (or any fault) in transfer class
(sal)-proper start routine that does checks of hardware and states in workflow
	-make sure workflow can start/resume from PECS as well (ie after DM restart)
		-it detects the current state 
(sal)-update functions in Sal's UI module to include error handling through return values and agree on what happens in that case
-integrate EBSD camera class into workflow
-make workflow compatible with choosing planar vs EBSD
	-use settings button
-init functions checks consistency between expected state tags and actual state as read from sensors. if there is a discrepancy, notify user and do not allow process to start. allow manual recovery/setup of correct state. this is needed when DM starts to make sure everything is right
	-detect power failure
		-check UPS for power failure
	-hardware:
		v-PECS Gate valve (open/closed) against sensor inputs
		v-PECS stage (lowered/raised) against WL sensor state
		v-SEM add consistency check for sem state changes that checks current state against coordinates saved in tag
		v-transfer last saved position vs aries controller
	v-state inference:
		v-workflowstate and last finished step to figure out where to recover
-SEM state check once every cycle
	-decide what to check in SEM - emission current? 
v-dock change names to clamp and unclamp
v-workflow checks that sample is present in dock - after dropoff - uncommented for now in simulator
v-workflow checks that sample is no longer present in dock - after pickup - uncommented for now in simulator
-absolute coordinates for SEM stage
v-reseating function that sets carrier into dovetail but never leaves PECS
-transfer position solution that differentiates between ebsd and planar
v-detect if system has been homed since last powerup
-transfer position tags become deltas, and deltas allow change. hardcode real positions, do not allow delta's more than a certain value.


Maintenance tasks:



After install:
Features:
-autofocus wrapper (range etc) as in example JH
-(workflow)add FWD decoupling after EBSD run (since OI might change it)
-(workflow)lock out SEM ui (rotation/tilt/x/y/z) - Mingkai
-(workflow)dock swap/install:
	-store rotation value in tag
	v-make sure SEM is homed/will home after swap to ensure no inconsistency problems when changing docks
	v-warn the user to use correct carrier
-(main/workflow)IPrep_check: check rotation value against stored value on dock install
-(workflow)add pogo pin check to workflow items. 
	-use dialog with timeout to ensure user has option to override
	-?how do we have a ui okcanceldialog with tiemout?
	-make check optional by setting samplecheck flag to 1
-have current action as a query-able item in mediator so that user can see what the system is doing. this will be queried by ui
-turn protected flag on or off in ui
-add ebsd step to workflow (first manual)
-(main/workflow)make workflow items optional
	-items in myloop are on/off depending on what the/tag says
-(SEM/safety) EBSD dock: define 'no go' zones, taking further extend of EBSD detector in mind. these are a combination of y and z in microscope. 
-(ui) have mediator (or now mediator) display states of devices. list(john):
	-linear stage (parker) location
	-gate valve state
	-gripper
	-which dock installed (mode)
	-dock state (clamped or unclamped)
	-dock position (clear/pickup_dropoff/reference)
-(devices/workflow)have device-specific error state as part of device class
	-save in tag
-(main/workflow)finish iprep_recover() by looking at specific error states in devices and global state
-(workflow) repeat certain steps a number of times before failing 
-(imaging) re-enable 3D volume history stack
	-add show stack option to multi-roi
-(workflow) on iprep_startrun: check that dock installed is correct (by looking at logic readout of encoder inputs)
-(check) UPS check once every cycle
	-make late binding method with executescriptstring method

done:
v-write good unittest for coord object and coordmanager to make sure all upcoming changes work and don't break existing code
v-allow semcoordmanager/roicoordmanager to delete coords
v-add complete DS parameterset to multi-roi object
v-update iprep_image() single roi to use multi-roi framework
v-IPrep_Setup_Imaging() needs to selectively enable things that happen at the start of iprep_image() based on roi enabler.  or separate object, since that leaves coord intact and scales to multi-roi easily. this 'roi_object' would store: 
v-use number of slices as stop condition of workflow loop
v-re-enable check for average pixel value after acquisition
v-store vector of where scribe mark should be and compare to old value and adjust transfer positions with this vector
	-have user move ROI into position and determine center
	-determine vector in um from center of image to center of ROI
	-move scribe mark with user supplied vector and have user confirm before storing position/correction in tags
v-lock out pecs UI during reseating
v-make sure that an unsafe condition turns off beam (though mediator)
v-clear and pickup_dropoff are 5 mm from eachother. this may be too much and lead to interference of planar fork with sample. make 3 mm instaed. test with ali
v-make different functions for transfering in workflow and as ui elements to ensure that checks are run accordingly




Bugs:
v-workflow goes to nominal imaging, not stored imaging
v-saving imaging conditions before workflow blanks beam




