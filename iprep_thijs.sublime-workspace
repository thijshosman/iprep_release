{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"set",
				"setState"
			],
			[
				"stage",
				"StageConsistencyCheck"
			],
			[
				"SI10",
				"SI10Value"
			],
			[
				"SEMCo",
				"SEMCoordManager"
			],
			[
				"GV",
				"GVPersistance"
			],
			[
				"che",
				"IPrep_continous_check"
			],
			[
				"sa",
				"sampleStatus"
			],
			[
				"sensor",
				"sensorStateInt"
			],
			[
				"ParkerTra",
				"aParkerTransfer"
			],
			[
				"get",
				"getState"
			],
			[
				"posi",
				"positionmanager"
			],
			[
				"pickup",
				"pickup_sem"
			],
			[
				"dropo",
				"dropoff_sem"
			],
			[
				"open",
				"open_pecs"
			],
			[
				"setp",
				"setpoint"
			],
			[
				"current",
				"current_pos"
			],
			[
				"Excep",
				"ExceptionObserverTest	class"
			],
			[
				"run",
				"run"
			],
			[
				"is",
				"isButtonPressed"
			],
			[
				"LCD",
				"LCDHardware"
			],
			[
				"noti",
				"notify_observers"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "// $BACKGROUND$\n// general IPrep functions used in various scripts\n\n\nclass deadFlagObject:object\n{\n	object deadFlag\n	object safetyFlag\n\n	void log(object self, number level, string text)\n	{\n		// log events in log files\n		LogEvent(\"deadFlag\", level, text)\n	}\n\n	void print(object self, string str1)\n	{\n		result(\"deadFlag: \"+str1+\"\\n\")\n		self.log(2,str1)\n\n	}\n\n	void deadFlagObject(object self)\n	{\n		// get deadflag\n		deadFlag = alloc(statePersistance)\n		safetyFlag = alloc(statePersistance)\n		deadFlag.init(\"flags:dead\")\n		safetyFlag.init(\"flags:safe\")\n	}\n\n	void setDead(object self, number status)\n	{\n		// set whether system is dead or not\n		self.print(\"deadflag set to \" + status)\n		deadFlag.setState(\"\"+status)\n	}\n\n	void setSafety(object self, number status)\n	{\n		// set whether system is safe to operate\n		self.print(\"safety flag set to \" + status)\n		safetyFlag.setState(\"\"+status)\n	}\n\n	number isDead(object self)\n	{\n		// is system dead (ie is flag set)?\n		return val(deadFlag.getState())\n\n	}\n\n	number isSafe(object self)\n	{\n		// is system safe to operate (ie is flag set)?\n		return val(safetyFlag.getState())\n	}\n\n\n	void setDeadSafe(object self)\n	{\n		self.setDead(1)\n		self.setSafety(1)\n	}\n\n	void setDeadUnsafe(object self)\n	{\n		self.setDead(1)\n		self.setSafety(0)\n	}\n\n	void setAliveSafe(object self)\n	{\n		self.setDead(0)\n		self.setSafety(1)\n	}\n\n	number checkAliveAndSafe(object self)\n	{\n		if (!self.isDead() & self.isSafe())\n			return 1\n		else\n		{\n			self.print(\"system is not (alive and safe)\")\n			return 0\n		}\n	}\n	\n	number checkDeadAndSafe(object self)\n	{\n		if (self.isDead() & self.isSafe())\n			return 1\n		else\n			return 0\n	}\n\n}\n\n// *** functions for safety: check status of these critical components inside the classes by checking tags ***\n\nclass safetyCheck:object\n{\n	\n\n}\n\nstring checkGatevalve()\n{\n	// returns gv state from tag\n	string tagStatus\n	GetPersistentTagGroup().TagGroupGetTagAsString(\"IPrep:GVState:state\", tagStatus)\n	\n	// returns gv state from sensor\n	string sensorStatus = \n\n\n	return status // open or closed\n}\n\nnumber checkParker()\n{\n	// returns the last known position of parker stage\n	number status\n	// change to correct tag name\n	GetPersistentTagGroup().TagGroupGetTagAsLong(\"IPrep:parkerState:currentPosition\", status)\n	return status // last known value of parker\n}\n\nstring checkSEM()\n{\n	// returns the last known state of the SEM\n	string status\n	// change to correct tag name \n	GetPersistentTagGroup().TagGroupGetTagAsString(\"IPrep:SEMStage:state\", status)\n	return status // sem state. \"clear\" or \"pickup_dropoff\" or \"imaging\"\n}\n\n\nclass haltCheckObject:object\n{\n	// TODO: make sure tag is set correctly\n	object haltFlag\n\n	void haltCheckObject(object self)\n	{\n		// get haltflag\n		haltFlag = alloc(statePersistance)\n		haltFlag.init(\"flags:halt\")\n	}\n	\n	void resetHaltFlag(object self)\n	{\n		haltFlag.setState(\"0\")\n		result(\"haltFlag: reset to 0\\n\")\n	}\n\n	void setHaltFlag(object self)\n	{\n		haltFlag.setState(\"1\")\n		result(\"haltFlag: set\\n\")\n	}\n\n	void haltCheck(object self)\n	{\n		// check halt bit, if set, set back to 0 and throw exception\n		if(haltFlag.getState()==\"1\")\n		{	\n			self.resetHaltFlag()\n			result(\"haltFlag detected, halting..\\n\")\n			throw(\"halt pressed\")\n			\n		}\n	}\n\n}\n\n\n\n\nnumber getProtectedModeFlag()\n{\n	// check protected mode flag\n\n	TagGroup tg = GetPersistentTagGroup() \n	\n	string current\n	\n	TagGroupGetTagAsString(tg,\"IPrep:flags:protected\", current )\n	\n	return val(current)\n}\n\nvoid continueCheck()\n{\n	// allow user to cancel out of current workflow set\n\n	if(getProtectedModeFlag())\n	{\n		if(!ContinueCancelDialog( \" continue?\" ))\n		{\n			result(\"user manually aborted\\n\")\n			throw(\"user opted not to continue\")\n		}\n	}\n\n}\n\nvoid continueCheck(string message)\n{\n	// allow user to cancel out of current workflow set\n\n	if(getProtectedModeFlag())\n	{\n		if(!ContinueCancelDialog( message + \" continue?\" ))\n		{\n			result(\"user manually aborted after \"+message+\"\\n\")\n			throw(message + \" user opted not to continue\")\n		}\n	}\n\n}\n\nvoid manualHaltOptionShift()\n{\n	if (optiondown() & shiftdown())\n	{\n		result(\"user manually aborted with shift+option\\n\")\n		throw(\"user aborted with shift+option\")\n	}\n}\n\nobject deadFlag = alloc(deadFlagObject)\n\nobject returnDeadFlag()\n{\n	// returns the deadflag object\n	return deadFlag\n}\n\nobject haltFlag = alloc(haltCheckObject)\n\nobject returnHaltFlag()\n{\n	// returns the haltflag object\n	return haltFlag\n}\n\n\n\n// testing\n/*\nreturnDeadFlag().setAliveSafe()\nresult(\"alivesafe: \"+returnDeadFlag().checkAliveAndSafe()+\"\\n\")\nresult(\"deadsafe: \"+returnDeadFlag().checkDeadAndSafe()+\"\\n\")\nreturnDeadFlag().setDeadSafe()\nresult(\"alivesafe: \"+returnDeadFlag().checkAliveAndSafe()+\"\\n\")\nresult(\"deadsafe: \"+returnDeadFlag().checkDeadAndSafe()+\"\\n\")\nreturnDeadFlag().setDeadUnSafe()\nresult(\"alivesafe: \"+returnDeadFlag().checkAliveAndSafe()+\"\\n\")\nresult(\"deadsafe: \"+returnDeadFlag().checkDeadAndSafe()+\"\\n\")\n*/\n\n// testing\n\n//result(getProtectedModeFlag()+\"\\n\")\n\n\n\n",
			"file": "iPrep gtk scripts/iprep_general.s",
			"file_size": 5173,
			"file_write_time": 130876064228914610,
			"settings":
			{
				"buffer_size": 4913,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "interface I_deadFlagObject\n{\n\n	void log(object self, number level, string text);\n\n	void print(object self, string str1);\n\n	void deadFlagObject(object self);\n\n	void setDead(object self, number status);\n\n	void setSafety(object self, number status);\n\n	number isDead(object self);\n\n	number isSafe(object self);\n\n	void setDeadSafe(object self);\n\n	void setDeadUnsafe(object self);\n\n	void setAliveSafe(object self);\n\n	number checkAliveAndSafe(object self);\n	\n	number checkDeadAndSafe(object self);\n\n}\n\n// *** functions for safety: check status of these critical components inside the classes by checking tags ***\n\nstring checkGatevalve()\n{\n	// returns gv state from tag\n	string tagStatus\n	GetPersistentTagGroup().TagGroupGetTagAsString(\"IPrep:GVState:state\", tagStatus)\n	\n	// returns gv state from sensor\n	string sensorStatus = \n\n\n	return status // open or closed\n}\n\nnumber checkParker()\n{\n	// returns the last known position of parker stage\n	number status\n	// change to correct tag name\n	GetPersistentTagGroup().TagGroupGetTagAsLong(\"IPrep:parkerState:currentPosition\", status)\n	return status // last known value of parker\n}\n\nstring checkSEM()\n{\n	// returns the last known state of the SEM\n	string status\n	// change to correct tag name \n	GetPersistentTagGroup().TagGroupGetTagAsString(\"IPrep:SEMStage:state\", status)\n	return status // sem state. \"clear\" or \"pickup_dropoff\" or \"imaging\"\n}\n\n\nclass haltCheckObject:object\n{\n	// TODO: make sure tag is set correctly\n	object haltFlag\n\n	void haltCheckObject(object self)\n	{\n		// get haltflag\n		haltFlag = alloc(statePersistance)\n		haltFlag.init(\"flags:halt\")\n	}\n	\n	void resetHaltFlag(object self)\n	{\n		haltFlag.setState(\"0\")\n		result(\"haltFlag: reset to 0\\n\")\n	}\n\n	void setHaltFlag(object self)\n	{\n		haltFlag.setState(\"1\")\n		result(\"haltFlag: set\\n\")\n	}\n\n	void haltCheck(object self)\n	{\n		// check halt bit, if set, set back to 0 and throw exception\n		if(haltFlag.getState()==\"1\")\n		{	\n			self.resetHaltFlag()\n			result(\"haltFlag detected, halting..\\n\")\n			throw(\"halt pressed\")\n			\n		}\n	}\n\n}",
			"file": "iPrep gtk scripts/iprep_general_interface.s",
			"file_size": 2133,
			"file_write_time": 130876064368178535,
			"settings":
			{
				"buffer_size": 2031,
				"line_ending": "Windows"
			}
		},
		{
			"file": "iPrep gtk scripts/00-install_IPrep.s",
			"settings":
			{
				"buffer_size": 2540,
				"line_ending": "Windows"
			}
		},
		{
			"file": "iPrep gtk scripts/transfer.s",
			"settings":
			{
				"buffer_size": 12766,
				"line_ending": "Windows"
			}
		},
		{
			"file": "iPrep gtk scripts/linearWorkflow.s",
			"settings":
			{
				"buffer_size": 18338,
				"line_ending": "Windows"
			}
		},
		{
			"file": "iPrep gtk scripts/SEM_iprep.s",
			"settings":
			{
				"buffer_size": 21257,
				"line_ending": "Windows"
			}
		},
		{
			"file": "iPrep testing scripts/test-scripts (from SC public folder, PECS commands, 20150807).s",
			"settings":
			{
				"buffer_size": 7995,
				"line_ending": "Windows"
			}
		},
		{
			"file": "TODO",
			"settings":
			{
				"buffer_size": 2419,
				"line_ending": "Windows"
			}
		},
		{
			"file": "iPrep gtk scripts/statePersistance.s",
			"settings":
			{
				"buffer_size": 2126,
				"line_ending": "Windows"
			}
		},
		{
			"file": "iPrep gtk scripts/iprep_main.s",
			"settings":
			{
				"buffer_size": 23768,
				"line_ending": "Windows"
			}
		},
		{
			"file": "iPrep gtk scripts/pecs_base.s",
			"settings":
			{
				"buffer_size": 2133,
				"line_ending": "Windows"
			}
		},
		{
			"file": "iPrep gtk scripts/pecs_iprep.s",
			"settings":
			{
				"buffer_size": 12117,
				"line_ending": "Windows"
			}
		},
		{
			"file": "iPrep gtk scripts/pecs_simulator.s",
			"settings":
			{
				"buffer_size": 6920,
				"line_ending": "Windows"
			}
		},
		{
			"file": "iPrep gtk scripts/gripper_base.s",
			"settings":
			{
				"buffer_size": 1243,
				"line_ending": "Windows"
			}
		},
		{
			"file": "iPrep gtk scripts/gripper_simulator.s",
			"settings":
			{
				"buffer_size": 2913,
				"line_ending": "Windows"
			}
		},
		{
			"file": "iPrep gtk scripts/gripper.s",
			"settings":
			{
				"buffer_size": 6307,
				"line_ending": "Windows"
			}
		},
		{
			"file": "iPrep gtk scripts/dock_base.s",
			"settings":
			{
				"buffer_size": 3945,
				"line_ending": "Windows"
			}
		},
		{
			"file": "iPrep gtk scripts/PlanarSEMdock.s",
			"settings":
			{
				"buffer_size": 4990,
				"line_ending": "Windows"
			}
		},
		{
			"file": "iPrep gtk scripts/sem_base.s",
			"settings":
			{
				"buffer_size": 26,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 634.0,
		"last_filter": "Package Control: ",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"disli",
				"Anaconda: Disable linting on this file"
			],
			[
				"anaconda",
				"Anaconda: Disable linting on this file"
			],
			[
				"package",
				"Package Control: Enable Package"
			],
			[
				"pa",
				"Package Control: Disable Package"
			],
			[
				"add",
				"Git: Add Current File"
			],
			[
				"commi",
				"Git: Quick Commit"
			],
			[
				"git ",
				"Git: Commit"
			],
			[
				"git",
				"Git: Commit"
			],
			[
				"pack",
				"Package Control: Install Package"
			]
		],
		"width": 772.0
	},
	"console":
	{
		"height": 186.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/thosman/Documents/private/vvtp dir/udps.py",
		"/C/Users/thosman/Documents/private/vvtp dir/timeoutsocket.py",
		"/C/Users/thosman/Documents/DM/iprep_release/iPrep gtk scripts/dock_base.s",
		"/C/Users/thosman/Documents/Development/python/python-playground/playground.sublime-project",
		"/C/Users/thosman/Documents/Development/python/python-playground/metaclasses.py",
		"/C/Users/thosman/Documents/Development/python/python-playground/testpath.py",
		"/C/Users/thosman/Documents/Development/python/python-playground/decorator.py",
		"/C/Users/thosman/Documents/DM/iprep_release/iPrep gtk scripts/iprep_general.s",
		"/C/Users/thosman/Documents/Development/python/default_python2.7.sublime-project",
		"/C/Users/thosman/AppData/Roaming/Sublime Text 3/Packages/Anaconda/Anaconda.sublime-settings",
		"/C/Users/thosman/Documents/Development/python/python-playground/formatting.py",
		"//ca-fs/freedisk/thijs/Aries_IPrep/ARxxCE/Terminal.ini",
		"//ca-fs/freedisk/thijs/Aries_IPrep/ARxxCE/prog15.8k",
		"//ca-fs/freedisk/thijs/Aries_IPrep/ARxxCE/setup.8k",
		"//ca-fs/freedisk/thijs/Aries_IPrep/ARxxCE/Controller.ini",
		"//ca-fs/freedisk/thijs/code/pecs camera.s",
		"//ca-fs/freedisk/thijs/Aries_IPrep/Project.ini",
		"//ca-fs/freedisk/thijs/code/interface.s",
		"//ca-fs/freedisk/thijs/Aries_IPrep/ARxxCE/prog0.8k",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/workingdir/tests/digiscan.s",
		"//ca-fs/freedisk/thijs/Terminate milling from image intensity change.s",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/settags.s",
		"/C/Users/thosman/Documents/DM/workingdevdir/autotermination/ROIIntensityPixels.s",
		"/C/Users/thosman/Documents/DM/scripts/openimagestack.s",
		"/C/Users/thosman/Documents/DM/workingdevdir/autotermination/testScript1.s",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/examples from Sal/test.s",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/workingdir/linearWorkflow.s",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/workingdir/binary.s",
		"/C/Users/thosman/Documents/DM/calibratewhitebalance/working/CalibrateWhiteBalance_old.s",
		"/C/Users/thosman/Documents/DM/workingdevdir/autotermination/SpecPrepTerminationWelcome.s",
		"/C/Users/thosman/Documents/DM/workingdevdir/autotermination/SpecPrepTermination.s",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/steve testing gv pecs.txt",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/workingdir/gripper.s",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/workingdir/transfer.s",
		"//ca-fs/freedisk/thijs/strings_planardock",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/workingdir/PlanarSEMdock.s",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/workingdir/pecs_iprep.s",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/examples from Sal/PlanarSEMdock.s",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/examples from Sal/gripper.s",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/examples from Sal/transfer.s",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/examples from Sal/AllMotion_test.s",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/examples from Sal/ParkerTest.s",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/examples from Sal/pecs.s",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/examples from Sal/linearWorkflow",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/examples from Sal/PlanarSEMdock",
		"/C/Users/thosman/Documents/DM/IPrep Workflow/examples from Sal/gateValve",
		"/C/Users/thosman/Documents/DM/scripts/ConvertVODToDM_directory.s",
		"/C/Users/thosman/Documents/DM/scripts/taggroup.s",
		"/C/Users/thosman/Documents/DM/scripts/MillPlot.s",
		"/C/Users/thosman/Documents/Development/ThijsTempApp/ThijsTempApp/plotlyObserver.py",
		"/C/Users/thosman/Documents/Development/ThijsTempApp/ThijsTempApp/temp.py",
		"/C/Users/thosman/Documents/Development/ThijsTempApp/ThijsTempApp/observertest.py",
		"/C/Users/thosman/Documents/Development/ThijsTempApp/ThijsTempApp/observer.py",
		"/C/Users/thosman/Documents/Development/ThijsTempApp/ThijsTempApp/lcdObserver.py",
		"/C/Users/thosman/Documents/Development/ThijsTempApp/ThijsTempApp/lcdHardware.py",
		"/C/Users/thosman/Documents/Development/python/playground/stringformat.py",
		"/C/Users/thosman/Documents/Development/ThijsTempApp/ThijsTempApp/main.py",
		"/C/Users/thosman/Documents/labview/Local SVN/IPrep DVT Control/Settings.xml",
		"/C/Users/thosman/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/thosman/Documents/Development/python/sublimetext/thijsTempApp.sublime-project",
		"/C/Users/thosman/Documents/Development/ThijsTempApp/ThijsTempApp/temp.pyc",
		"/C/Users/thosman/AppData/Roaming/Sublime Text 3/Packages/Git/Git.sublime-settings",
		"/C/Users/thosman/AppData/Roaming/Sublime Text 3/Packages/Package Control/Package Control.sublime-settings",
		"/C/Users/thosman/Documents/Development/python/playground/simple_build_test.py",
		"/C/Users/thosman/AppData/Roaming/Sublime Text 3/Packages/User/anaconda-python3.sublime-build",
		"/C/Users/thosman/Desktop/labview 2015 install log",
		"/C/Users/thosman/Documents/Development/python/playground/testpy2.py",
		"/C/Users/thosman/Documents/Development/python/playground/metaclasses.py",
		"/C/Users/thosman/Documents/Development/python/playground/testinheritanceconstructor.py",
		"/C/Users/thosman/Documents/Development/python/Threading/testthread.py",
		"/C/Users/thosman/Documents/Development/python/sublimetext/thijsTempApp.sublime-workspace",
		"/C/Users/thosman/AppData/Roaming/Sublime Text 3/Packages/GitGutter/GitGutter.sublime-settings",
		"/C/Users/thosman/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/thosman/Desktop/ML.sublime-project",
		"/C/Users/thosman/AppData/Local/Continuum/Anaconda/Scripts/anaconda.bat",
		"/C/Users/thosman/Documents/Development/python/python3_continuum/setpath.bat",
		"/C/Users/thosman/Documents/Arduino/libraries/DHT/DHT.cpp",
		"/C/Users/thosman/Documents/Arduino/libraries/DHT/DHT.h",
		"/C/Users/thosman/AppData/Roaming/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/C/Users/thosman/Documents/Development/ThijsTempApp/ThijsTempApp/lcdHardware",
		"/C/Users/thosman/Documents/Development/ThijsTempApp/ThijsTempApp/lcdevent.py",
		"//ca-fs/freedisk/thijs/Projects/ConsoleTest/ConsoleTest.sln",
		"//ca-fs/freedisk/thijs/Projects/ConsoleTest/ConsoleTest/ConsoleTest.cpp",
		"/C/Users/thosman/Documents/Development/ThijsTempApp/ThijsTempApp/observer.pyc",
		"/C/Users/thosman/Documents/Development/python/grabber/grabber1.py",
		"/C/Users/thosman/Documents/Development/ThijsTempApp/ThijsTempApp/audio.py",
		"/C/Users/thosman/Documents/Development/ThijsTempApp/ThijsTempApp/lcd.py",
		"/C/Users/thosman/Documents/Development/ThijsTempApp/ThijsTempApp/test.py",
		"/C/Users/thosman/Documents/Development/python/TempMeasure.py",
		"/C/Users/thosman/Documents/Development/python/grabber/grabber2.py",
		"/C/Users/thosman/AppData/Local/Continuum/Anaconda/Examples/chaco/quiver.py",
		"/C/Users/thosman/AppData/Local/Continuum/Anaconda/Examples/bokeh/test_examples.py"
	],
	"find":
	{
		"height": 68.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"check",
			"getGVState()",
			"getStageState",
			"stageState",
			"getStageState",
			"GVP",
			"22",
			"pickup",
			"self",
			"getCurrentPosition",
			"tags",
			"linter",
			"pixelT",
			"IPrep_setSliceNumber",
			"set"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "iPrep gtk scripts/iprep_general.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4913,
						"regions":
						{
						},
						"selection":
						[
							[
								1512,
								1512
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "iPrep gtk scripts/iprep_general_interface.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2031,
						"regions":
						{
						},
						"selection":
						[
							[
								494,
								494
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "iPrep gtk scripts/00-install_IPrep.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2540,
						"regions":
						{
						},
						"selection":
						[
							[
								1563,
								1563
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 604.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "iPrep gtk scripts/transfer.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12766,
						"regions":
						{
						},
						"selection":
						[
							[
								3165,
								3165
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 163.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "iPrep gtk scripts/linearWorkflow.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18338,
						"regions":
						{
						},
						"selection":
						[
							[
								12846,
								12846
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 208.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "iPrep gtk scripts/SEM_iprep.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21257,
						"regions":
						{
						},
						"selection":
						[
							[
								1998,
								1998
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3745.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "iPrep testing scripts/test-scripts (from SC public folder, PECS commands, 20150807).s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7995,
						"regions":
						{
						},
						"selection":
						[
							[
								5257,
								5257
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1930.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "TODO",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2419,
						"regions":
						{
						},
						"selection":
						[
							[
								1336,
								1336
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "iPrep gtk scripts/statePersistance.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2126,
						"regions":
						{
						},
						"selection":
						[
							[
								256,
								256
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "iPrep gtk scripts/iprep_main.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23768,
						"regions":
						{
						},
						"selection":
						[
							[
								608,
								608
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 10,
					"file": "iPrep gtk scripts/pecs_base.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2133,
						"regions":
						{
						},
						"selection":
						[
							[
								631,
								631
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "iPrep gtk scripts/pecs_iprep.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12117,
						"regions":
						{
						},
						"selection":
						[
							[
								11034,
								11034
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 16322.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "iPrep gtk scripts/pecs_simulator.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6920,
						"regions":
						{
						},
						"selection":
						[
							[
								358,
								358
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage"
						},
						"translation.x": -0.0,
						"translation.y": 545.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "iPrep gtk scripts/gripper_base.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1243,
						"regions":
						{
						},
						"selection":
						[
							[
								59,
								59
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 64.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "iPrep gtk scripts/gripper_simulator.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2913,
						"regions":
						{
						},
						"selection":
						[
							[
								756,
								756
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "iPrep gtk scripts/gripper.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6307,
						"regions":
						{
						},
						"selection":
						[
							[
								59,
								59
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "iPrep gtk scripts/dock_base.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3945,
						"regions":
						{
						},
						"selection":
						[
							[
								393,
								393
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "iPrep gtk scripts/PlanarSEMdock.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4990,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								4556
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 8216.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "iPrep gtk scripts/sem_base.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26,
						"regions":
						{
						},
						"selection":
						[
							[
								26,
								26
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 39.0
	},
	"input":
	{
		"height": 47.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 245.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 152.0
	},
	"pinned_build_system": "python 2.7 dev conda ",
	"project": "iprep_thijs.sublime-project",
	"replace":
	{
		"height": 74.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 295.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
